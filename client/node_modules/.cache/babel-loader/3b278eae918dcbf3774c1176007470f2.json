{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chriskennedy/Documents/final-project/job-hunter/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/chriskennedy/Documents/final-project/job-hunter/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/chriskennedy/Documents/final-project/job-hunter/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/chriskennedy/Documents/final-project/job-hunter/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/chriskennedy/Documents/final-project/job-hunter/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import API from'../utils/API';// test components\nimport{Col,Row,Container}from\"../components/Grid\";import{Input,TextArea,FormBtn}from\"../components/Form\";import Jumbotron from\"../components/Jumbotron\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Register(){// Setting our component's initial state\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),users=_useState2[0],setUsers=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),formObject=_useState4[0],setFormObject=_useState4[1];// Load all users and store them with setUsers\n// useEffect(() => {\n//   loadUsers()\n// }, [])\n// Loads all users and sets them to users\n// function loadUsers() {\n//   API.getUsers()\n//     .then(res => \n//       setUsers(res.data)\n//     )\n//     .catch(err => console.log(err));\n// };\n// Deletes a book from the database with a given id, then reloads books from the db\n// function deleteUser(id) {\n//   API.deleteUser(id)\n//     .then(res => loadUsers())\n//     .catch(err => console.log(err));\n// }\n// Handles updating component state when the user types into the input field\nfunction handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setFormObject(_objectSpread(_objectSpread({},formObject),{},_defineProperty({},name,value)));};// When the form is submitted, use the API.saveBook method to save the book data\n// Then reload books from the database\nfunction handleFormSubmit(_x){return _handleFormSubmit.apply(this,arguments);}function _handleFormSubmit(){_handleFormSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var username,email,password,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();username=formObject.username;email=formObject.email;password=formObject.password;if(!(username&&email&&password)){_context.next=9;break;}_context.next=7;return fetch('/api/users',{method:'POST',body:JSON.stringify({username:username,email:email,password:password}),headers:{'Content-Type':'application/json'}});case 7:response=_context.sent;if(response.ok){console.log('Account Generated.');document.location.replace('/');}else{alert(response.statusText);}case 9:case\"end\":return _context.stop();}}},_callee);}));return _handleFormSubmit.apply(this,arguments);};return/*#__PURE__*/_jsx(Container,{fluid:true,children:/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{size:\"md-6\",children:[/*#__PURE__*/_jsx(Jumbotron,{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Sign Up\"})}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"username\",placeholder:\"Username\"}),/*#__PURE__*/_jsx(Input,{onChange:handleInputChange,name:\"email\",placeholder:\"Email Address\"}),/*#__PURE__*/_jsx(TextArea,{onChange:handleInputChange,name:\"password\",type:\"password\",placeholder:\"Password\"}),/*#__PURE__*/_jsx(FormBtn// disabled={!(formObject.author && formObject.title && formObject.password)}\n,{onClick:handleFormSubmit,children:\"Submit\"})]})]})})});}export default Register;","map":{"version":3,"sources":["/Users/chriskennedy/Documents/final-project/job-hunter/client/src/pages/registertest.js"],"names":["React","useState","useEffect","API","Col","Row","Container","Input","TextArea","FormBtn","Jumbotron","Register","users","setUsers","formObject","setFormObject","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","username","email","password","fetch","method","body","JSON","stringify","headers","response","ok","console","log","document","location","replace","alert","statusText"],"mappings":"k4BAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,GAAP,KAAgB,cAAhB,CAEA;AACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,SAAnB,KAAoC,oBAApC,CACA,OAASC,KAAT,CAAgBC,QAAhB,CAA0BC,OAA1B,KAAyC,oBAAzC,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,C,wFAGA,QAASC,CAAAA,QAAT,EAAoB,CAChB;AACA,cAA0BV,QAAQ,CAAC,EAAD,CAAlC,wCAAOW,KAAP,eAAcC,QAAd,eACA,eAAoCZ,QAAQ,CAAC,EAAD,CAA5C,yCAAOa,UAAP,eAAmBC,aAAnB,eAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAASC,CAAAA,iBAAT,CAA2BC,KAA3B,CAAkC,CAChC,kBAAwBA,KAAK,CAACC,MAA9B,CAAQC,IAAR,eAAQA,IAAR,CAAcC,KAAd,eAAcA,KAAd,CACAL,aAAa,gCAAKD,UAAL,wBAAkBK,IAAlB,CAAyBC,KAAzB,GAAb,CACD,EAED;AACA;AAjCgB,QAkCFC,CAAAA,gBAlCE,4JAkCjB,iBAAgCJ,KAAhC,uJACGA,KAAK,CAACK,cAAN,GACMC,QAFT,CAEoBT,UAAU,CAACS,QAF/B,CAGSC,KAHT,CAGiBV,UAAU,CAACU,KAH5B,CAISC,QAJT,CAIoBX,UAAU,CAACW,QAJ/B,MAMOF,QAAQ,EAAIC,KAAZ,EAAqBC,QAN5B,gDAO4BC,CAAAA,KAAK,CAAC,YAAD,CAAe,CACzCC,MAAM,CAAE,MADiC,CAEzCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBP,QAAQ,CAARA,QADmB,CAEnBC,KAAK,CAALA,KAFmB,CAGnBC,QAAQ,CAARA,QAHmB,CAAf,CAFmC,CAOzCM,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAPgC,CAAf,CAPjC,QAOWC,QAPX,eAgBG,GAAIA,QAAQ,CAACC,EAAb,CAAiB,CACfC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACAC,QAAQ,CAACC,QAAT,CAAkBC,OAAlB,CAA0B,GAA1B,EACD,CAHD,IAGO,CACLC,KAAK,CAACP,QAAQ,CAACQ,UAAV,CAAL,CACD,CArBJ,sDAlCiB,mDAyDf,CAEC,mBACE,KAAC,SAAD,EAAW,KAAK,KAAhB,uBACE,KAAC,GAAD,wBACE,MAAC,GAAD,EAAK,IAAI,CAAC,MAAV,wBACE,KAAC,SAAD,wBACE,+BADF,EADF,cAIE,qCACE,KAAC,KAAD,EACE,QAAQ,CAAExB,iBADZ,CAEE,IAAI,CAAC,UAFP,CAGE,WAAW,CAAC,UAHd,EADF,cAME,KAAC,KAAD,EACE,QAAQ,CAAEA,iBADZ,CAEE,IAAI,CAAC,OAFP,CAGE,WAAW,CAAC,eAHd,EANF,cAWE,KAAC,QAAD,EACE,QAAQ,CAAEA,iBADZ,CAEE,IAAI,CAAC,UAFP,CAGE,IAAI,CAAC,UAHP,CAIE,WAAW,CAAC,UAJd,EAXF,cAiBE,KAAC,OACC;AADF,EAEE,OAAO,CAAEK,gBAFX,oBAjBF,GAJF,GADF,EADF,EADF,CAmCD,CAGH,cAAeV,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport API from '../utils/API';\n\n// test components\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\n\n\nfunction Register() {\n    // Setting our component's initial state\n    const [users, setUsers] = useState([])\n    const [formObject, setFormObject] = useState({})\n  \n    // Load all users and store them with setUsers\n    // useEffect(() => {\n    //   loadUsers()\n    // }, [])\n  \n    // Loads all users and sets them to users\n    // function loadUsers() {\n    //   API.getUsers()\n    //     .then(res => \n    //       setUsers(res.data)\n    //     )\n    //     .catch(err => console.log(err));\n    // };\n  \n    // Deletes a book from the database with a given id, then reloads books from the db\n    // function deleteUser(id) {\n    //   API.deleteUser(id)\n    //     .then(res => loadUsers())\n    //     .catch(err => console.log(err));\n    // }\n  \n    // Handles updating component state when the user types into the input field\n    function handleInputChange(event) {\n      const { name, value } = event.target;\n      setFormObject({...formObject, [name]: value})\n    };\n  \n    // When the form is submitted, use the API.saveBook method to save the book data\n    // Then reload books from the database\n   async function handleFormSubmit(event) {\n      event.preventDefault();\n      const username = formObject.username;\n      const email = formObject.email;\n      const password = formObject.password;\n\n      if (username && email && password) {\n        const response = await fetch('/api/users', {\n          method: 'POST',\n          body: JSON.stringify({\n            username,\n            email,\n            password,\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        });\n      if (response.ok) {\n        console.log('Account Generated.')\n        document.location.replace('/');\n      } else {\n        alert(response.statusText);\n      }\n    }\n    };\n  \n      return (\n        <Container fluid>\n          <Row>\n            <Col size=\"md-6\">\n              <Jumbotron>\n                <h1>Sign Up</h1>\n              </Jumbotron>\n              <form>\n                <Input\n                  onChange={handleInputChange}\n                  name=\"username\"\n                  placeholder=\"Username\"\n                />\n                <Input\n                  onChange={handleInputChange}\n                  name=\"email\"\n                  placeholder=\"Email Address\"\n                />\n                <TextArea\n                  onChange={handleInputChange}\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n                <FormBtn\n                  // disabled={!(formObject.author && formObject.title && formObject.password)}\n                  onClick={handleFormSubmit}\n                >\n                  Submit\n                </FormBtn>\n              </form>\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  \n  \n  export default Register;"]},"metadata":{},"sourceType":"module"}
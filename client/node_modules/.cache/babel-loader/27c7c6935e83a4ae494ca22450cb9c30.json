{"ast":null,"code":"var _jsxFileName = \"/Users/chriskennedy/Documents/final-project/job-hunter/client/src/pages/registertest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport API from '../utils/API'; // test components\n\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  // Setting our component's initial state\n  const [users, setUsers] = useState([]);\n  const [formObject, setFormObject] = useState({}); // Load all users and store them with setUsers\n  // useEffect(() => {\n  //   loadUsers()\n  // }, [])\n  // Loads all users and sets them to users\n  // function loadUsers() {\n  //   API.getUsers()\n  //     .then(res => \n  //       setUsers(res.data)\n  //     )\n  //     .catch(err => console.log(err));\n  // };\n  // Deletes a book from the database with a given id, then reloads books from the db\n  // function deleteUser(id) {\n  //   API.deleteUser(id)\n  //     .then(res => loadUsers())\n  //     .catch(err => console.log(err));\n  // }\n  // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  async function handleFormSubmit(event) {\n    event.preventDefault();\n    const username = formObject.username;\n    const email = formObject.email;\n    const password = formObject.password;\n\n    if (username && email && password) {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        console.log('Account Generated.');\n        document.location.replace('/');\n      } else {\n        alert(response.statusText);\n      }\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"username\",\n            placeholder: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"email\",\n            placeholder: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn // disabled={!(formObject.author && formObject.title && formObject.password)}\n          , {\n            onClick: handleFormSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"DOz0KCLid4pMi3HSw7y9Z9RK+Qg=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/chriskennedy/Documents/final-project/job-hunter/client/src/pages/registertest.js"],"names":["React","useState","useEffect","API","Col","Row","Container","Input","TextArea","FormBtn","Jumbotron","Register","users","setUsers","formObject","setFormObject","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","username","email","password","response","fetch","method","body","JSON","stringify","headers","ok","console","log","document","location","replace","alert","statusText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CAEA;;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,oBAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAChB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C,CAHgB,CAKhB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,WAASe,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AACAL,IAAAA,aAAa,CAAC,EAAC,GAAGD,UAAJ;AAAgB,OAACI,IAAD,GAAQC;AAAxB,KAAD,CAAb;AACD;;AAAA,GA9Be,CAgChB;AACA;;AACD,iBAAeE,gBAAf,CAAgCJ,KAAhC,EAAuC;AACpCA,IAAAA,KAAK,CAACK,cAAN;AACA,UAAMC,QAAQ,GAAGT,UAAU,CAACS,QAA5B;AACA,UAAMC,KAAK,GAAGV,UAAU,CAACU,KAAzB;AACA,UAAMC,QAAQ,GAAGX,UAAU,CAACW,QAA5B;;AAEA,QAAIF,QAAQ,IAAIC,KAAZ,IAAqBC,QAAzB,EAAmC;AACjC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACzCC,QAAAA,MAAM,EAAE,MADiC;AAEzCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,UAAAA,QADmB;AAEnBC,UAAAA,KAFmB;AAGnBC,UAAAA;AAHmB,SAAf,CAFmC;AAOzCO,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAPgC,OAAf,CAA5B;;AASF,UAAIN,QAAQ,CAACO,EAAb,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAC,QAAAA,QAAQ,CAACC,QAAT,CAAkBC,OAAlB,CAA0B,GAA1B;AACD,OAHD,MAGO;AACLC,QAAAA,KAAK,CAACb,QAAQ,CAACc,UAAV,CAAL;AACD;AACF;AACA;;AAAA;AAEC,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,2BACE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,MAAV;AAAA,gCACE,QAAC,SAAD;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,QAAQ,EAAExB,iBADZ;AAEE,YAAA,IAAI,EAAC,UAFP;AAGE,YAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,kBADF,eAME,QAAC,KAAD;AACE,YAAA,QAAQ,EAAEA,iBADZ;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,WAAW,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA,kBANF,eAWE,QAAC,QAAD;AACE,YAAA,QAAQ,EAAEA,iBADZ;AAEE,YAAA,IAAI,EAAC,UAFP;AAGE,YAAA,IAAI,EAAC,UAHP;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,kBAXF,eAiBE,QAAC,OAAD,CACE;AADF;AAEE,YAAA,OAAO,EAAEK,gBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GA9FIV,Q;;KAAAA,Q;AAiGP,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport API from '../utils/API';\n\n// test components\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\nimport Jumbotron from \"../components/Jumbotron\";\n\n\nfunction Register() {\n    // Setting our component's initial state\n    const [users, setUsers] = useState([])\n    const [formObject, setFormObject] = useState({})\n  \n    // Load all users and store them with setUsers\n    // useEffect(() => {\n    //   loadUsers()\n    // }, [])\n  \n    // Loads all users and sets them to users\n    // function loadUsers() {\n    //   API.getUsers()\n    //     .then(res => \n    //       setUsers(res.data)\n    //     )\n    //     .catch(err => console.log(err));\n    // };\n  \n    // Deletes a book from the database with a given id, then reloads books from the db\n    // function deleteUser(id) {\n    //   API.deleteUser(id)\n    //     .then(res => loadUsers())\n    //     .catch(err => console.log(err));\n    // }\n  \n    // Handles updating component state when the user types into the input field\n    function handleInputChange(event) {\n      const { name, value } = event.target;\n      setFormObject({...formObject, [name]: value})\n    };\n  \n    // When the form is submitted, use the API.saveBook method to save the book data\n    // Then reload books from the database\n   async function handleFormSubmit(event) {\n      event.preventDefault();\n      const username = formObject.username;\n      const email = formObject.email;\n      const password = formObject.password;\n\n      if (username && email && password) {\n        const response = await fetch('/api/users', {\n          method: 'POST',\n          body: JSON.stringify({\n            username,\n            email,\n            password,\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        });\n      if (response.ok) {\n        console.log('Account Generated.')\n        document.location.replace('/');\n      } else {\n        alert(response.statusText);\n      }\n    }\n    };\n  \n      return (\n        <Container fluid>\n          <Row>\n            <Col size=\"md-6\">\n              <Jumbotron>\n                <h1>Sign Up</h1>\n              </Jumbotron>\n              <form>\n                <Input\n                  onChange={handleInputChange}\n                  name=\"username\"\n                  placeholder=\"Username\"\n                />\n                <Input\n                  onChange={handleInputChange}\n                  name=\"email\"\n                  placeholder=\"Email Address\"\n                />\n                <TextArea\n                  onChange={handleInputChange}\n                  name=\"password\"\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n                <FormBtn\n                  // disabled={!(formObject.author && formObject.title && formObject.password)}\n                  onClick={handleFormSubmit}\n                >\n                  Submit\n                </FormBtn>\n              </form>\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  \n  \n  export default Register;"]},"metadata":{},"sourceType":"module"}